<!--
    The Razor component for staff registration at the "/registerstaff" page.
    Users can enter a username and password to register a staff member.
-->
@page "/registerstaff"
@using Cw.Data
@using System.IO
@inject NavigationManager NavigationManager

<h3>User Form</h3>

@if (!isRegistrationSuccessful)
{
    <EditForm Model="@staff" OnValidSubmit="@HandleValidSubmit">
        <div class="form-group">
            <label for="username">Username:</label>
            <InputText id="username" @bind-Value="staff.Username" class="form-control" />
        </div>

        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" @bind-Value="staff.Password" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Register</button>
        <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Back</button>
    </EditForm>
}
else
{
    <div class="alert alert-success" role="alert">
        Staff member has been registered successfully!
        <button type="button" class="close" @onclick="ResetRegistrationStatus">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@code {
    // Staff object to hold registration information
    private Staff staff = new Staff();
    // List to hold all staff members
    private AllStaffsList listOfAllStaffs = new();
    // Flag to track the registration status
    private bool isRegistrationSuccessful = false;

    // Method to handle the form submission on successful validation
    private void HandleValidSubmit()
    {
        // Directory path for storing staff information
        string p1 = "D:\\CourseWork";

        // Ensure the directory exists, create it if necessary
        if (!Directory.Exists(p1))
        {
            Directory.CreateDirectory(p1);
        }

        // File path for storing all staff members
        string commonFilePath = Path.Combine(p1, "AllStaffs.json");

        // Check if the file exists
        if (!File.Exists(commonFilePath))
        {
            // If the file doesn't exist, create a new list of staff members and save to the file
            listOfAllStaffs = new AllStaffsList();
            listOfAllStaffs.AllStaffs.Add(staff);
            string detailsJson = JsonSerializer.Serialize(listOfAllStaffs);
            File.WriteAllText(commonFilePath, detailsJson);
        }
        else
        {
            // If the file exists, read the existing list, add the new staff member, and save the updated list
            string jsonFromFile = File.ReadAllText(commonFilePath);
            AllStaffsList list_b = JsonSerializer.Deserialize<AllStaffsList>(jsonFromFile);
            list_b.AllStaffs.Add(staff);
            string newJson = JsonSerializer.Serialize(list_b);
            File.WriteAllText(commonFilePath, newJson);
        }

        // Set the flag to indicate successful registration
        isRegistrationSuccessful = true;
    }

    // Method to navigate back to the admin page
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/admin");
    }

    // Method to reset the registration status and clear the form inputs
    private void ResetRegistrationStatus()
    {
        // Reset the flag when the user closes the confirmation alert
        isRegistrationSuccessful = false;

        // Clear form inputs by creating a new Staff object
        staff = new Staff();
    }
}
